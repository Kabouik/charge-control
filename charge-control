#!/usr/bin/env bash

# Copyright © [2023] Mathieu Laparie <mlaparie [at] disr [dot] it>

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Capture Ctrl-C
trap cleanup INT  # Set the cleanup function to execute upon receiving SIGINT

# Function to show usage/help
usage() {
printf "charge-control allows controlling battery charge to avoid overstressing the
battery with full charges or full discharges. The script requires root permissions.

Usage: sudo ./charge-control [-d DEACTIVATION] [-r REACTIVATION] [-f FREQUENCY] [-p POWEROFF] [-a ANIMATION]

Options:
  -d DEACTIVATION  battery percentage at which charge is disabled (default: 90)
  -r REACTIVATION  battery percentage at which charge is enabled (default: 75)
  -f FREQUENCY     monitoring frequency of battery level (default: 10s)
  -p POWEROFF      battery percentage at which the device is powered off (default: 10)
  -a ANIMATION     monitoring animation, 1, 2, 3 or 4, in decreasing CPU usage order (default: 2)
  -b BATTERY       battery name as referred to in /sys/class/power_supply/ (default: BAT0)
  -h: show this help

All arguments are optional. Values can be provided as positional arguments in that order
if not prefixed with flags, or provided in any order if prefixed with flags.

"
exit 0
}

# Exit gracefully and reset charge control
cleanup() {
    echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
    printf '\033[34m\n○ Charge control disabled\033[0m'
    printf '\033[?25h' # Restore the cursor block
    exit 0
}

# Monitoring spinner symbols
spinner() {
    local chars
    local sleep_duration

    case $animation in
        1) chars="⠁⠂⠄⡀⡈⡐⡠⣀⣁⣂⣄⣌⣔⣤⣥⣦⣮⣶⣷⣿⡿⠿⢟⠟⡛⠛⠫⢋⠋⠍⡉⠉⠑⠡⢁"
	   sleep_duration=0.3
	   ;;
        2) chars="⣷⣯⣟⡿⢿⣻⣽⣾"
           sleep_duration=0.6
	   ;;
        3) chars="▖▘▝▗"
           sleep_duration=1.5
	   ;;
        4) chars="▁▃▄▅▆▇█▇▆▅▄▃"
           sleep_duration=3
	   ;;
        *) chars="⣷⣯⣟⡿⢿⣻⣽⣾"
           sleep_duration=0.6
	   ;;  # Default animation
    esac

    while :; do
        for (( i = 0; i < ${#chars}; i++ )); do
            printf '  %s Monitoring battery level...\r' "${chars:$i:1}"
            sleep "$sleep_duration"
        done
    done
}

# Check that argument values are legal
check_values() {
    if [[ ! $deactivation =~ ^[0-9]+$ ]]; then
	printf '\033[31mInvalid DEACTIVATION percentage: this must be a numeric value between 50 and 100. Aborting.\033[0m\n'
	exit 0
    elif [[ ! $reactivation =~ ^[0-9]+$ ]]; then
	printf '\033[31mInvalid REACTIVATION percentage: this must be a numeric value between 20 and 98. Aborting.\033[0m\n'
	exit 0
    elif [[ ! $frequency =~ ^[0-9]+[sm]?$ ]]; then
	printf '\033[31mInvalid FREQUENCY: this must be a numeric value, with or without unit (s, m) suffix, e.g., 10, 10s, 2m, etc.\033[0m\n'
	exit 0
    elif [[ ! $poweroff =~ ^[0-9]+$ ]]; then
	printf '\033[31mInvalid POWEROFF percentage: this must be a numeric value between 1 and 25. Aborting.\033[0m\n'
	exit 0
    elif (( $deactivation > 100 )) || (( $reactivation > 100 )); then
	printf '\033[31mCharge DEACTIVATION and REACTIVATION levels cannot be higher than 100%%. Aborting.\033[0m\n'
	exit 0
    elif (( $deactivation - $reactivation < 2 )); then
	printf '\033[31mCharge DEACTIVATION level must be at least 2%% higher than charge REACTIVATION level. Aborting.\033[0m\n'
	exit 0
    elif (( $deactivation < 50 )) || (( $reactivation < 20 )); then
	printf '\033[31mCharge DEACTIVATION and REACTIVATION levels must be at least 50%% and 20%%, respectively. Aborting.\033[0m\n'
	exit 0
    elif (( $poweroff < 1 )) || (( $poweroff > 25 )); then
	printf '\033[31mPOWEROFF level must be between 1%% and 25%%. Aborting.\033[0m\n'
	exit 0
    else
	printf '\033[34m● Charge control enabled\033[0m
  Charge deactivation level: %s%%
  Charge reactivation level: %s%%
  Monitoring frequency: %s
  Auto power-off level: %s%%\n' "$deactivation" "$reactivation" "$frequency" "$poweroff"
        uevent=$(<"/sys/class/power_supply/$batname/uevent")
        capacity=$(grep -oP "(?<=POWER_SUPPLY_CAPACITY=).*" <<< "$uevent")
	if (( capacity >= $reactivation )) && (( capacity < $deactivation )); then
	    readytocharge="1"
            echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
            printf '\033[32m  ▪ Charge enabled until battery reaches %s%%\033[0m (%s)\n' "$deactivation" "$(date +'%R')"
        elif (( capacity <= $reactivation )); then
	    readytocharge="1"
            echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
            printf '\033[32m  ▪ Charge enabled until battery reaches %s%%\033[0m (%s)\n' "$deactivation" "$(date +'%R')"
        elif (( capacity >= $deactivation )); then
	    readytocharge="0"
            echo 1 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
            printf '\033[33m  ▪ Charge disabled until battery drops to %s%%\033[0m (%s)\n' "$reactivation" "$(date +'%R')"
        fi
	monitor
    fi
}

# Monitor battery level and manage charge
monitor() {
    printf '\033[?25l' # Hide the cursor block
    spinner_pid=0
    spinner &
    while :; do
        uevent=$(<"/sys/class/power_supply/$batname/uevent")
        status=$(grep -oP "(?<=POWER_SUPPLY_STATUS=).*" <<< "$uevent")
        capacity=$(grep -oP "(?<=POWER_SUPPLY_CAPACITY=).*" <<< "$uevent")
        suspend=$(grep -oP "(?<=POWER_INPUT_SUSPEND=).*" <<< "$uevent")
        
        case "$status" in
            "Charging")
                if (( capacity >= $deactivation )); then
		    readytocharge="0"
                    echo 1 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
                    printf '\033[33m  ▪ Charge disabled until battery drops to %s%%\033[0m (%s)\n' "$reactivation" "$(date +'%R')"
                fi
                ;;
            "Discharging")
                if (( capacity <= $reactivation )) && [[ "$suspend" -eq "1" ]]; then
                    echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
                    printf '\033[32m  ▪ Charge enabled until battery reaches %s%%\033[0m (%s)\n' "$deactivation" "$(date +'%R')"
                elif (( capacity <= $reactivation )) && [[ "$suspend" -eq "0" ]] && [[ "$readytocharge" -eq "0" ]]; then
		    readytocharge="1"
		    echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
		    printf '\033[32m  ▪ Charge enabled until battery reaches %s%%\033[0m (%s)\n' "$deactivation" "$(date +'%R')"
                elif (( capacity <= $poweroff )); then
                    echo 0 | tee /sys/class/power_supply/battery/input_suspend >/dev/null 2>&1
                    printf '\033[31m  ▪ Battery level critically low (< %s%%), powering off in 60s…\033[0m (%s)\n' "$poweroff" "$(date +'%R')"
                    sleep 60s
		    poweroff --halt
                fi
                ;;
        esac
        
        sleep "$frequency"
    done
    
    if [[ $spinner_pid -ne 0 ]]; then
        kill $spinner_pid  # Stop the spinner once the loop ends
    fi
    
    cleanup
}

# Parse arguments using getopts
deactivation=90
reactivation=75
frequency=10s
poweroff=10
animation=2
no_flags=true  # Flag to track if no flags were used
while getopts "d:r:f:p:a:b:h" opt; do
  case $opt in
    d) deactivation=$OPTARG; no_flags=false ;;
    r) reactivation=$OPTARG; no_flags=false ;;
    f) frequency=$OPTARG; no_flags=false ;;
    p) poweroff=$OPTARG; no_flags=false ;;
    a) animation=$OPTARG; no_flags=false ;;
    b) batname=$OPTARG; no_flags=false ;;
    h | *) usage ;;
  esac
done

# Check if no flags were used, only values
if $no_flags && [[ $# -gt 0 ]]; then # Positional arguments detected without flags
    printf 'No flag(s) detected, using values as positional arguments instead.\n'
    deactivation=${1:-90}
    reactivation=${2:-75}
    frequency=${3:-10s}
    poweroff=${4:-10}
    animation=${5:-2}
    batname=${6:-BAT0}
elif [[ $# -gt 0 ]]; then
    printf 'Flag(s) detected, any positional argument not prefixed with a flag will be ignored.\n'
else
    printf 'No argument(s) provided, using only default values.\n'
fi

# Check permissions
if [[ ! $UID = 0 ]]; then
    printf "This script must be run as root.\n"
    exit 0
else
    check_values $deactivation $reactivation $frequency $poweroff $animation
fi
